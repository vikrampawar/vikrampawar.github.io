<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-10-16T22:39:30+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">bits</title><subtitle>Pieces on bits</subtitle><entry><title type="html">Software Architecture Fundamentals - 7 : Architecture Anti-patterns 1</title><link href="http://localhost:4000/anti-patterns/2018/10/16/software-architecture-fundamentals-8.html" rel="alternate" type="text/html" title="Software Architecture Fundamentals - 7 : Architecture Anti-patterns 1" /><published>2018-10-16T22:00:00+01:00</published><updated>2018-10-16T22:00:00+01:00</updated><id>http://localhost:4000/anti-patterns/2018/10/16/software-architecture-fundamentals-8</id><content type="html" xml:base="http://localhost:4000/anti-patterns/2018/10/16/software-architecture-fundamentals-8.html">&lt;h2 id=&quot;architecture-anti-patterns&quot;&gt;Architecture Anti-patterns&lt;/h2&gt;

&lt;p&gt;More Anti-patterns than patterns&lt;/p&gt;

&lt;p&gt;We repeatedly do that produces negative results&lt;/p&gt;

&lt;h2 id=&quot;architecture-by-implication&quot;&gt;Architecture by implication&lt;/h2&gt;

&lt;p&gt;Systems lacking clearly documented&lt;/p&gt;

&lt;p&gt;What architecture pattern are you using?&lt;/p&gt;

&lt;p&gt;What client model is most appropriate?&lt;/p&gt;

&lt;p&gt;Does the hardware or os matter?&lt;/p&gt;

&lt;p&gt;How do you handle component integration?&lt;/p&gt;

&lt;p&gt;What communication protocols will you used?&lt;/p&gt;

&lt;p&gt;Is the solutions even feasible given the skills, budget and time?&lt;/p&gt;

&lt;p&gt;How secure does the system need to be?&lt;/p&gt;

&lt;p&gt;Does the system need to scale?&lt;/p&gt;

&lt;p&gt;How much performance is needed from the system?&lt;/p&gt;

&lt;p&gt;How available the system needs to be?&lt;/p&gt;

&lt;p&gt;Maintainability?&lt;/p&gt;

&lt;p&gt;Be careful about over-confidence&lt;/p&gt;

&lt;p&gt;Remember that agile methodologies are not a substitute for creating an architecture.&lt;/p&gt;

&lt;h2 id=&quot;covering-your-assets&quot;&gt;Covering your assets&lt;/h2&gt;

&lt;p&gt;Continuing to document and present alternatives without ever making an architecture decision&lt;/p&gt;

&lt;p&gt;Architect has to present alternatives, clearly articulate the pros and cons of each, and recommend the best solution for the situation&lt;/p&gt;

&lt;h2 id=&quot;witches-brew--design-by-committee&quot;&gt;Witches brew / Design by committee&lt;/h2&gt;

&lt;p&gt;Architectures are designed by groups resulting in a complex mixture of ideas and lack of clear vision&lt;/p&gt;

&lt;h2 id=&quot;gold-plating&quot;&gt;Gold plating&lt;/h2&gt;

&lt;p&gt;Continuing to define the architecture well past the point which the extra effort is adding any value&lt;/p&gt;

&lt;p&gt;Too many details hide the core principles and standards&lt;/p&gt;

&lt;p&gt;Commonly leads to the analysis paralysis anti-pattern&lt;/p&gt;

&lt;p&gt;increases costs, adds no value&lt;/p&gt;

&lt;p&gt;No big-picture, difficult to understand&lt;/p&gt;

&lt;h2 id=&quot;vendor-king&quot;&gt;Vendor king&lt;/h2&gt;

&lt;p&gt;product-dependent architecture&lt;/p&gt;

&lt;p&gt;Vendor app as a service, use message bus&lt;/p&gt;

&lt;h2 id=&quot;bing-bang-architecture&quot;&gt;Bing bang architecture&lt;/h2&gt;

&lt;p&gt;Defining at the beginning when we know little about the system&lt;/p&gt;

&lt;p&gt;Architect only what is absolutely necessary. Let the architecture evolve&lt;/p&gt;

&lt;p&gt;Don’t forget req, business etc change - so must architecture&lt;/p&gt;</content><author><name></name></author><summary type="html">Architecture Anti-patterns</summary></entry><entry><title type="html">Software Architecture Fundamentals - 7 : Design patterns</title><link href="http://localhost:4000/design/patterns/2018/10/16/software-architecture-fundamentals-7.html" rel="alternate" type="text/html" title="Software Architecture Fundamentals - 7 : Design patterns" /><published>2018-10-16T21:50:00+01:00</published><updated>2018-10-16T21:50:00+01:00</updated><id>http://localhost:4000/design/patterns/2018/10/16/software-architecture-fundamentals-7</id><content type="html" xml:base="http://localhost:4000/design/patterns/2018/10/16/software-architecture-fundamentals-7.html">&lt;h2 id=&quot;strategy-pattern&quot;&gt;Strategy pattern&lt;/h2&gt;

&lt;p&gt;Define a family of algorithm, encapsulate each one, and make them interchangeable&lt;/p&gt;

&lt;h2 id=&quot;command-pattern&quot;&gt;Command pattern&lt;/h2&gt;

&lt;p&gt;Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.&lt;/p&gt;

&lt;p&gt;This is not required in a language that has closures, as the required block of code can be sent directly to the method.&lt;/p&gt;

&lt;h2 id=&quot;good-and-bad-of-patterns&quot;&gt;Good and bad of patterns&lt;/h2&gt;

&lt;p&gt;Good common vocabulary&lt;/p&gt;

&lt;p&gt;Design guide&lt;/p&gt;

&lt;p&gt;Terrible implementation guide&lt;/p&gt;

&lt;p&gt;Not a panacea&lt;/p&gt;

&lt;p&gt;Terrible religion&lt;/p&gt;

&lt;p&gt;Combination of patterns are useful&lt;/p&gt;

&lt;p&gt;You may not use patterns because it inhibits your creativity&lt;/p&gt;

&lt;h2 id=&quot;patterns-today&quot;&gt;Patterns today&lt;/h2&gt;

&lt;p&gt;Many “classic” GoF patterns encapsulated or deprecated by language evolution&lt;/p&gt;

&lt;p&gt;Iterator Command&lt;/p&gt;

&lt;p&gt;Paradigms beyond just object-orientation&lt;/p&gt;

&lt;p&gt;Language dictates the patterns&lt;/p&gt;

&lt;p&gt;OOP are large and coarse-grained - end up making data structures&lt;/p&gt;

&lt;p&gt;blub developer&lt;/p&gt;

&lt;p&gt;understand the idiomatic patterns for your language/platform&lt;/p&gt;

&lt;p&gt;clarity vs obscurity&lt;/p&gt;</content><author><name></name></author><summary type="html">Strategy pattern</summary></entry><entry><title type="html">Microservices - Chapter 1</title><link href="http://localhost:4000/microservices/2018/10/15/micro-services-oreilly-c1.html" rel="alternate" type="text/html" title="Microservices - Chapter 1" /><published>2018-10-15T22:15:00+01:00</published><updated>2018-10-15T22:15:00+01:00</updated><id>http://localhost:4000/microservices/2018/10/15/micro-services-oreilly-c1</id><content type="html" xml:base="http://localhost:4000/microservices/2018/10/15/micro-services-oreilly-c1.html">&lt;p&gt;Notes from Microservices - Oreilly, chapter 1&lt;/p&gt;

&lt;h2 id=&quot;what-are-microservices&quot;&gt;What are microservices?&lt;/h2&gt;

&lt;p&gt;Domain driven design Eric evans&lt;/p&gt;

&lt;p&gt;Continuous deployment&lt;/p&gt;

&lt;p&gt;Hexagonal architecture Alistair Cockburn’s&lt;/p&gt;

&lt;p&gt;Virtualization platforms&lt;/p&gt;

&lt;p&gt;Small teams&lt;/p&gt;

&lt;p&gt;Systems at scale&lt;/p&gt;

&lt;h2 id=&quot;small-and-focused-on-doing-one-thing-well&quot;&gt;Small and focused on doing one thing well&lt;/h2&gt;

&lt;p&gt;Robert C Martin Single responsibility principle. Keep things that change for the same reason together and separate those things that change for different reasons.&lt;/p&gt;

&lt;p&gt;Service boundaries align with business boundaries&lt;/p&gt;

&lt;p&gt;How small?&lt;/p&gt;

&lt;h2 id=&quot;autonomous&quot;&gt;Autonomous&lt;/h2&gt;

&lt;p&gt;Communication between services via network calls.&lt;/p&gt;

&lt;p&gt;Avoid tight coupling and allow separation of services&lt;/p&gt;

&lt;h2 id=&quot;key-benefits&quot;&gt;Key benefits&lt;/h2&gt;

&lt;h1 id=&quot;technology-heterogeneity&quot;&gt;Technology heterogeneity&lt;/h1&gt;

&lt;p&gt;Netflix and Twitter use JVM&lt;/p&gt;

&lt;h1 id=&quot;resilience&quot;&gt;Resilience&lt;/h1&gt;

&lt;p&gt;Service boundary becomes a bulkhead - problem is isolated it’s not cascaded.&lt;/p&gt;

&lt;h1 id=&quot;scaling&quot;&gt;Scaling&lt;/h1&gt;

&lt;p&gt;Scale only the required services - cost saving.&lt;/p&gt;

&lt;p&gt;Gilt online fasion retailer embraces microservices.&lt;/p&gt;

&lt;h1 id=&quot;ease-of-deployment&quot;&gt;Ease of deployment&lt;/h1&gt;

&lt;p&gt;Smaller change, easy identification of issues and rollback.&lt;/p&gt;

&lt;h1 id=&quot;organizational-alignment&quot;&gt;Organizational alignment&lt;/h1&gt;

&lt;p&gt;Smaller teams&lt;/p&gt;

&lt;h1 id=&quot;composability&quot;&gt;Composability&lt;/h1&gt;

&lt;h1 id=&quot;optimizing-for-replaceability&quot;&gt;Optimizing for Replaceability&lt;/h1&gt;

&lt;p&gt;Rewrite services.&lt;/p&gt;

&lt;h2 id=&quot;what-about-service-oriented-architecture&quot;&gt;What about Service-Oriented Architecture&lt;/h2&gt;

&lt;p&gt;SOA not practical&lt;/p&gt;

&lt;h2 id=&quot;other-decompositional-techniques&quot;&gt;Other decompositional techniques&lt;/h2&gt;

&lt;h1 id=&quot;shared-libraries&quot;&gt;Shared libraries&lt;/h1&gt;

&lt;p&gt;No technological heterogeneity.&lt;/p&gt;

&lt;p&gt;Different parts cannot be scaled.&lt;/p&gt;

&lt;p&gt;Reduced ability to deploy in isolation.&lt;/p&gt;

&lt;h1 id=&quot;modules&quot;&gt;Modules&lt;/h1&gt;

&lt;p&gt;OSGI - Open source gateway initiative&lt;/p&gt;

&lt;p&gt;Java doesn’t have modules?!&lt;/p&gt;

&lt;p&gt;Erland has modules&lt;/p&gt;

&lt;p&gt;Modular decomposition within process boundary doesn’t happen in practice.&lt;/p&gt;</content><author><name></name></author><summary type="html">Notes from Microservices - Oreilly, chapter 1</summary></entry><entry><title type="html">Basic cryptography concepts</title><link href="http://localhost:4000/cryptography/security/keys/2018/10/15/basic-key-concepts.html" rel="alternate" type="text/html" title="Basic cryptography concepts" /><published>2018-10-15T20:15:00+01:00</published><updated>2018-10-15T20:15:00+01:00</updated><id>http://localhost:4000/cryptography/security/keys/2018/10/15/basic-key-concepts</id><content type="html" xml:base="http://localhost:4000/cryptography/security/keys/2018/10/15/basic-key-concepts.html">&lt;h2 id=&quot;cryptography&quot;&gt;Cryptography&lt;/h2&gt;

&lt;p&gt;Notes from &lt;em&gt;Understanding the digital world&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Caesar cipher shifts letters by 3 positions&lt;/p&gt;

&lt;p&gt;The rot13 algorithm shifts letters by 13 positions.&lt;/p&gt;

&lt;p&gt;Mary, Queen of Scots beheaded in 1587 as her code was cracked.&lt;/p&gt;

&lt;p&gt;To keep contents private, the contents are scrambled which is called encryption. This is done using a secret which is called a &lt;em&gt;key&lt;/em&gt;. The key is then used to unscramble or decrypt the contents.&lt;/p&gt;

&lt;p&gt;Frequency analysis is used to crack substitution cyphers as the above.&lt;/p&gt;

&lt;p&gt;Security by obscurity never works.&lt;/p&gt;

&lt;h1 id=&quot;secret-key-cryptography&quot;&gt;Secret-key cryptography&lt;/h1&gt;

&lt;p&gt;This is aka symmetric-key cryptography.&lt;/p&gt;

&lt;p&gt;The key is secret and it used for encryption and decryption.&lt;/p&gt;

&lt;p&gt;Data encryption standard - DES
Advanced encryption standard - AES&lt;/p&gt;

&lt;p&gt;Key distribution is a problem, as each party must have it.&lt;/p&gt;

&lt;p&gt;Key proliferation is a problem as a new one is needed for each new party.&lt;/p&gt;

&lt;h1 id=&quot;public-key-cryptography&quot;&gt;Public-key cryptography&lt;/h1&gt;

&lt;p&gt;Each person has a pair - private key and public key. Message encrypted by one can be decrypted by other and vice-versa.&lt;/p&gt;

&lt;p&gt;A encrypts using B’s public key. B decrypts using corresponding private key.&lt;/p&gt;

&lt;p&gt;B encrypts using A’s public key. A decrypts using corresponding private key.&lt;/p&gt;

&lt;p&gt;No shared secrets - no distribution problem.&lt;/p&gt;

&lt;p&gt;Browser generates temporary symmetric key, encrypts using server’s public key. Server decrypts using it’s private key. Then the browser and server can use symmetric key for further exchanges.&lt;/p&gt;

&lt;p&gt;Is slow. So used in step 1, then symmetric key used for next step which is orders of magnitude quicker.&lt;/p&gt;

&lt;p&gt;For digital signing, A would encrypt using A’s private key. It’s to show that the content has come from A and not others. It’s not for encryption as it can be decrypted using A’s public key. To encrypt, A will first encrypt using B’s public key and then sign by encrypting with A’s private key. B decrypts with A’s public key to verify it’s from A and then decrypts using B’s private key to see the contents.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;public key encryption possibilities&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;Goal&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Encrypt by B’s public key&lt;/td&gt;
      &lt;td&gt;Decrypt by B’s private key&lt;/td&gt;
      &lt;td&gt;A encrypts A’s text&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Encrypt by A’s private key&lt;/td&gt;
      &lt;td&gt;Decrypt by A’s public key&lt;/td&gt;
      &lt;td&gt;A signs A’s text&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Encrypt by A’s private key and encrypt by B’s public key&lt;/td&gt;
      &lt;td&gt;Decrypt by A’s public key and decrypt by B’s private key&lt;/td&gt;
      &lt;td&gt;A signs A’s text and encrypts&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Forward secrecy&lt;/em&gt; : Each message encrypted with one time password.&lt;/p&gt;

&lt;p&gt;RSA algorithm generates large &amp;gt; 500 digit composite which is a product of equal sized primes and uses these to create the public and private keys. The prime numbers are required to decrypt the messages.&lt;/p&gt;

&lt;p&gt;Is slow. Message digest or cryptographic hash is a faster method of indirect signing.&lt;/p&gt;

&lt;p&gt;A fixed-length sequence of bits, the digest or hash is generated from text. It’s computationally infeasible to generate a text that has the same digest. A slight change in text will change half the bits in the digest.&lt;/p&gt;

&lt;p&gt;Message digest algorithms - MD5 (128 bit), SHA (160 bits), SHA-2 &amp;amp; SHA-3 (224-512 bits) &lt;br /&gt;
Servers prove identity by presenting a certificate issued by a certificate authority.&lt;/p&gt;</content><author><name></name></author><summary type="html">Cryptography</summary></entry><entry><title type="html">Software Architecture Fundamentals - 6 : Architecture patterns 2</title><link href="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-6.html" rel="alternate" type="text/html" title="Software Architecture Fundamentals - 6 : Architecture patterns 2" /><published>2018-10-14T22:11:00+01:00</published><updated>2018-10-14T22:11:00+01:00</updated><id>http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-6</id><content type="html" xml:base="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-6.html">&lt;h2 id=&quot;pipeline-architecture-pattern&quot;&gt;Pipeline architecture pattern&lt;/h2&gt;

&lt;p&gt;a.k.a pipes and filter architecture&lt;/p&gt;

&lt;p&gt;roots from OS&lt;/p&gt;

&lt;h1 id=&quot;pipes&quot;&gt;pipes&lt;/h1&gt;

&lt;p&gt;Connects different filters and transfers data&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pipe         filter         pipe
&lt;span class=&quot;nt&quot;&gt;------&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; transformation] &lt;span class=&quot;nt&quot;&gt;-------&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;uni-directional only&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;usually  point-point for high performance, but could be message-based for scalability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;payload can be any type (text, bytes, object)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;useful for smaller deterministic systems with a distinct processing flow&lt;/p&gt;

&lt;p&gt;filters can easily be added and removed&lt;/p&gt;

&lt;p&gt;provides for high level of decoupling&lt;/p&gt;

&lt;p&gt;supports evolutionary design&lt;/p&gt;

&lt;p&gt;able to easily adapt to changing requirements&lt;/p&gt;

&lt;p&gt;can easily be incorporated into another pattern&lt;/p&gt;

&lt;h1 id=&quot;filters&quot;&gt;filters&lt;/h1&gt;

&lt;p&gt;Receives data, does something on it and pushes it on to the next filter&lt;/p&gt;

&lt;p&gt;self-contained and independent from other filters&lt;/p&gt;

&lt;p&gt;perform one single very specific task&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;4 different filter types
             producer    &lt;span class=&quot;nt&quot;&gt;-----pipe-------&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; starting point, outbound only
  &lt;span class=&quot;nt&quot;&gt;--pipe--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  transformer &lt;span class=&quot;nt&quot;&gt;-----pipe-------&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; input, processing, output     
  &lt;span class=&quot;nt&quot;&gt;--pipe--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  tester      - - &lt;span class=&quot;nt&quot;&gt;-pipe-&lt;/span&gt; - - -&amp;gt; input, discard or pass-thru
  &lt;span class=&quot;nt&quot;&gt;--pipe--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  consumer                      ending point, inbound only       

example

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;input reader&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;P&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--raw&lt;/span&gt; data--&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;converter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Tr&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--xml&lt;/span&gt; data--&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;reducer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Tr&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; 
                                                                             |
                 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;input processor&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;&amp;lt;&lt;span class=&quot;nt&quot;&gt;--validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Te&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;scoped xml data] &amp;lt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;pipeline-vs-event-driven&quot;&gt;pipeline vs event-driven&lt;/h1&gt;

&lt;p&gt;pipeline&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;synchronous data filtering&lt;/li&gt;
  &lt;li&gt;single target&lt;/li&gt;
  &lt;li&gt;simple single purpose filters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;event-driven&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;asynchronous event processing&lt;/li&gt;
  &lt;li&gt;multiple targets for events&lt;/li&gt;
  &lt;li&gt;complex multi-purpose processors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;microkernel-architecture&quot;&gt;Microkernel architecture&lt;/h2&gt;

&lt;p&gt;architectural components&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;core system&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;minimal functionality to run the system&lt;/li&gt;
  &lt;li&gt;general business rules and logic&lt;/li&gt;
  &lt;li&gt;doesn’t contain customer processing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;plugin module&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;standalone independent module&lt;/li&gt;
  &lt;li&gt;specific additional rules or logic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example: Eclipse&lt;/p&gt;

&lt;p&gt;core : claims processing&lt;/p&gt;

&lt;p&gt;plugins : CA, NY, GA etc&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;useful for systems that have custom processing or processing is susceptible to change&lt;/li&gt;
  &lt;li&gt;plug-in modules can easily be added and removed&lt;/li&gt;
  &lt;li&gt;supports evolutionary design&lt;/li&gt;
  &lt;li&gt;easily adapts to change in requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;space-based-architecture&quot;&gt;Space based architecture&lt;/h2&gt;

&lt;h1 id=&quot;traditional-scaling&quot;&gt;Traditional scaling&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/scaling.jpeg&quot; alt=&quot;Scaling&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;space-scaling&quot;&gt;Space scaling&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/space.jpeg&quot; alt=&quot;Space&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;processing-unit&quot;&gt;Processing Unit&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/processing-unit.jpeg&quot; alt=&quot;Processing Unit&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;features&quot;&gt;Features&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;it’s all about variable scalability&lt;/li&gt;
  &lt;li&gt;good for applications that have variable load or inconsistent peak times&lt;/li&gt;
  &lt;li&gt;not a good fit for traditional large-scale relational database systems&lt;/li&gt;
  &lt;li&gt;relatively complex and expensive pattern to implement&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Space-based_architecture&quot;&gt; Wikipedia Space based architecture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Pipeline_(software)&quot;&gt;Pipeline software&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.enterpriseintegrationpatterns.com/patterns/messaging/PipesAndFilters.html&quot;&gt; EAI pipes and filters&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Pipeline architecture pattern</summary></entry><entry><title type="html">Software Architecture Fundamentals - 5 : Architecture patterns</title><link href="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-5.html" rel="alternate" type="text/html" title="Software Architecture Fundamentals - 5 : Architecture patterns" /><published>2018-10-14T17:58:00+01:00</published><updated>2018-10-14T17:58:00+01:00</updated><id>http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-5</id><content type="html" xml:base="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-5.html">&lt;p&gt;Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.&lt;/p&gt;

&lt;p&gt;History of Patterns movement&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.uk/Pattern-Language-Buildings-Construction-Environmental/dp/0195019199/ref=sr_1_1?ie=UTF8&amp;amp;qid=1539541549&amp;amp;sr=8-1&amp;amp;keywords=a+pattern+language&quot;&gt;Design patterns in Architecture Book&lt;/a&gt; by Christopher Alexander 1977&lt;/p&gt;

&lt;p&gt;GoF book 1984&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Traditional layered architecture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Presentation Layer
Business Layer
Persistence Layer
Database Layer&lt;/p&gt;

&lt;p&gt;Layers are closed.&lt;/p&gt;

&lt;p&gt;Go from one layer to another.&lt;/p&gt;

&lt;p&gt;Information flows down. Never up.&lt;/p&gt;

&lt;p&gt;Separation of concerns.&lt;/p&gt;

&lt;p&gt;Layers of isolation&lt;/p&gt;

&lt;p&gt;Database can  be changed from DB2 or Oracle. First two layers won’t change.&lt;/p&gt;

&lt;p&gt;Persistence Layer changes, it does not affect other layers.&lt;/p&gt;

&lt;p&gt;Active record mixes Persistence and Business layers.&lt;/p&gt;

&lt;p&gt;Architecture sinkhole. Too many layers of abstraction.&lt;/p&gt;

&lt;p&gt;Variations and hybrids, services layer comes between Business and Persistence layers. It is open, it can go direct to Database layer.&lt;/p&gt;

&lt;p&gt;presentation to managed bean -&amp;gt; business object -&amp;gt;&lt;/p&gt;

&lt;p&gt;Good general purpose architecture - particularly with J2EE&lt;/p&gt;

&lt;p&gt;Easy to implement, test and govern&lt;/p&gt;

&lt;p&gt;Good starting point for most systems&lt;/p&gt;

&lt;p&gt;Not suitable for a Trading application&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Event-driven architecture - EDA/SEDA&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; Event-&amp;gt;process-&amp;gt;process-&amp;gt;process
          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
           -&amp;gt;process-&amp;gt;process &amp;lt;- event
                          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                           -&amp;gt;process&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;3 types of topology&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Event processor topology&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Kicked off by event, and then mediated by Event processor&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Asynchronous IBM message flow follows this pattern&lt;/span&gt;
Event -&amp;gt; Event queue -&amp;gt; Event processor -&amp;gt; Event topic -&amp;gt; process
                              &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                               -&amp;gt; Event topic -&amp;gt; process 
                                         &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                          -&amp;gt; process&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Allows orchestration, mediation, transformation&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Broker topology&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Kicked off by Event, there's no event queue or event processor/mediator&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# IBM Publish Subscribe follows this pattern&lt;/span&gt;
Event  -&amp;gt; Event topic&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;on message broker&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; -&amp;gt; process
                                              &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                               -&amp;gt; Event topic -&amp;gt; process 
                                                     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                                      -&amp;gt; process&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Brokerless topology&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# No broker, more complicated, process need to know which processes &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# they need to communicate with&lt;/span&gt;
Event  -&amp;gt;  process -&amp;gt; process
                &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                 -&amp;gt; process &amp;lt;- Event
                        &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                         -&amp;gt; process&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# One way fire and forget&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;motorist address change event&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Customer processor] 
         &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;address change&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;quote process] &lt;span class=&quot;nt&quot;&gt;-------&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;recal quote&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-------&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;notification process]
                           &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;                                           /
                            &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;claims process] &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;claims update&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;------&lt;/span&gt; 
                                                                        &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                                                         &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;adjustment process]       &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Fire and forget&lt;/p&gt;

&lt;p&gt;Highly decoupled and distributed&lt;/p&gt;

&lt;p&gt;Highly scalable&lt;/p&gt;

&lt;p&gt;High degree of complexity&lt;/p&gt;

&lt;p&gt;Good for event-based business models and business processes&lt;/p&gt;

&lt;p&gt;Not good for processes which require high degree of data sharing, orchestration, and reuse&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Service-oriented architecture&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;business services BS1 BS2 BS3  ..

message bus
   process chreographer
   service orchestrator

enterprise service ES1 ES2 ES3..
application services AS1  &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; infrastructure services IS1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;business services template&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; 		: abstract
owner 		: business &lt;span class=&quot;nb&quot;&gt;users
&lt;/span&gt;granularity : course-grained
scope 		: enterprise-level
notes 		: contains names&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Placing an order, a trade.
Abstract, not linked to any tech - BPEL, WSDL, XML&lt;/p&gt;

&lt;p&gt;&lt;em&gt;enterprise services template&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; 		: concrete
owner 		: architect / shared services team
granularity : course-grained
scope 		: enterprise-level
notes 		: custom or vendor implementation
			  one-to-one or many-to-one relationship with BS&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;CreateCustomer
CalculateQuote&lt;/p&gt;

&lt;p&gt;Granularity is the hard part&lt;/p&gt;

&lt;p&gt;&lt;em&gt;application services template&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; 		: concrete
owner 		: application development team
granularity : fine-grained
scope 		: application-level
notes 		: &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;addDriver
addVehicle
getInventoryCount&lt;/p&gt;

&lt;p&gt;&lt;em&gt;infrastructure services template&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; 		: concrete
owner 		: application development team
granularity : fine-grained
scope 		: enterprise-level
notes 		: supports application and enterprise service
			  non business functionality&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;writeAuditLog
checkUserAccess
writeErrorLog
singleSignon&lt;/p&gt;

&lt;p&gt;&lt;em&gt;message bus&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;process choreography&lt;/p&gt;

&lt;p&gt;service orientation&lt;/p&gt;

&lt;p&gt;service registry&lt;/p&gt;

&lt;p&gt;protocol transformation&lt;/p&gt;

&lt;p&gt;message enhancement&lt;/p&gt;

&lt;p&gt;message transformation&lt;/p&gt;

&lt;p&gt;&lt;em&gt;example&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;BS           CreateQuote
                |
MB          &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; message bus &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            /          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
ES   Create Customer   Calc Quote
         /      &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
AS  AddDriver AddVehicle    CheckDrivingRecord
           &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;    &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;         / 
IS           WriteAuditTrail&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Good pattern for understanding and implementing business processes and services&lt;/p&gt;

&lt;p&gt;very high level of complexity&lt;/p&gt;

&lt;p&gt;difficult to implement due to complex tools, hype, misconceptions, and heavy business user involvement&lt;/p&gt;

&lt;p&gt;SOA is a pattern, not an implementation of a vendor.&lt;/p&gt;

&lt;p&gt;good for pattern for large, complex, heterogeneous businesses that have a large number of common services (e.g., insurance)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;References&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Event-driven_architecture&quot;&gt;Wikipedia (Event Driven Architecture )&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://soa.sys-con.com/node/738704&quot;&gt;Creating an Effective SOA Service Taxonomy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don’t forget it’s all about data&lt;/p&gt;

&lt;p&gt;Data is spread around the enterprise, there is no system of record. Whose’s data is right? Users are protective about data. Data consolidation is difficult to do.&lt;/p&gt;</content><author><name></name></author><summary type="html">Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.</summary></entry><entry><title type="html">Software Architecture Fundamentals - 4 : Architecting for change</title><link href="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-4.html" rel="alternate" type="text/html" title="Software Architecture Fundamentals - 4 : Architecting for change" /><published>2018-10-14T17:46:00+01:00</published><updated>2018-10-14T17:46:00+01:00</updated><id>http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-4</id><content type="html" xml:base="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-4.html">&lt;p&gt;Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.&lt;/p&gt;

&lt;p&gt;Business in constant change&lt;/p&gt;

&lt;p&gt;Technologies in constant change&lt;/p&gt;

&lt;p&gt;Architectural agility&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technique 1 : Reduce dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use a Messaging/Bus/Adapters/Architectural Pattern to reduce dependencies&lt;/p&gt;

&lt;p&gt;Components can evolve independently&lt;/p&gt;

&lt;p&gt;Downsides : Solution becomes more complex, performance goes down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technique 2 : Standards&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Industry Standards&lt;/p&gt;

&lt;p&gt;Corporate Standards&lt;/p&gt;

&lt;p&gt;De-facto Standards&lt;/p&gt;

&lt;p&gt;Large resource pool, although be wary of average resources, requires good hiring practices.&lt;/p&gt;

&lt;p&gt;Better integration&lt;/p&gt;

&lt;p&gt;Feasibility (in budget)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technique 3 : Product agnostic approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Avoid vendor lock-in using anti-corruption layers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technique 4 : Domain specific architecture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Generic architecture is difficult to change&lt;/p&gt;

&lt;p&gt;Limits scope -&amp;gt; drivers, requirements, business direction, industry trends&lt;/p&gt;

&lt;p&gt;Trading -&amp;gt; high performance architecture&lt;/p&gt;

&lt;p&gt;Insurance –&amp;gt; Shared?&lt;/p&gt;

&lt;p&gt;Business goals, requirements, drivers and industry trends should drive architecture.&lt;/p&gt;</content><author><name></name></author><summary type="html">Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.</summary></entry><entry><title type="html">Software Architecture Fundamentals - 3</title><link href="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-3.html" rel="alternate" type="text/html" title="Software Architecture Fundamentals - 3" /><published>2018-10-14T16:40:00+01:00</published><updated>2018-10-14T16:40:00+01:00</updated><id>http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-3</id><content type="html" xml:base="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-3.html">&lt;p&gt;Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Architecture Soft Skills&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Requires leadership. The 3Cs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Communication&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Effectively communicate ideas, concepts, issues and solutions with stake holders - developers, qa, devops, business&lt;/p&gt;

&lt;p&gt;Explain on white board rather than writing documents&lt;/p&gt;

&lt;p&gt;Explain complex technical topics to non technical people&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Colloboration&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Solicit ideas&lt;/p&gt;

&lt;p&gt;Get feedback early and often&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Clarity&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Articulate architectural solution in clear concise terms as applicable to the stake holder&lt;/p&gt;

&lt;p&gt;Translation skills business requirements to architecture are important&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Techincal knowledge&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Knowledge pyramid&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Top - The stuff you know. Need to maintain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Middle - The stuff you know, you don’t know.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bottom - The stuff you don’t know, you don’t know.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More of top leads to more depth&lt;/p&gt;

&lt;p&gt;More of middle leads to more breadth.&lt;/p&gt;

&lt;p&gt;Architect should aim to increase breadth, reduce bottom.&lt;/p&gt;

&lt;p&gt;Multi-platform knowledge, otherwise Architect would have a narrow focus. Hammer analogy.&lt;/p&gt;

&lt;p&gt;To increase breadth, read books, infoq, attend conferences, see videos.&lt;/p&gt;

&lt;p&gt;Aim to increase business domain knowledge.&lt;/p&gt;

&lt;p&gt;Know the trends and issues.&lt;/p&gt;

&lt;p&gt;Gain trust by speaking the business language.&lt;/p&gt;

&lt;p&gt;Use appropriate methodology and strategy&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Understanding large codebases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Metrics&lt;/p&gt;

&lt;p&gt;Cyclometric complexity&lt;/p&gt;

&lt;p&gt;C&amp;amp;K&lt;/p&gt;

&lt;p&gt;Source monitor&lt;/p&gt;

&lt;p&gt;Heat maps (Cruise control)&lt;/p&gt;

&lt;p&gt;panopticode&lt;/p&gt;

&lt;p&gt;Code coverage&lt;/p&gt;

&lt;p&gt;Size and complexity pyramid (inCode)&lt;/p&gt;

&lt;p&gt;Toxicity chart&lt;/p&gt;

&lt;p&gt;X-Ray : Eclipse plugin, a probe&lt;/p&gt;

&lt;p&gt;Proximity alert&lt;/p&gt;

&lt;p&gt;Codecity&lt;/p&gt;

&lt;p&gt;Signal to noise&lt;/p&gt;

&lt;p&gt;No ‘1 true metric’&lt;/p&gt;

&lt;p&gt;metrics gathered and ignored&lt;/p&gt;

&lt;p&gt;inaction/over action&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hawthorne effect&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Initial assessment - More light leads to more productivity. Later finding proved that light had on affect, but the act of measuring productivity had increased productivity.&lt;/p&gt;

&lt;p&gt;Essential vs accidental complexity&lt;/p&gt;

&lt;p&gt;Probes vs Radiators&lt;/p&gt;</content><author><name></name></author><summary type="html">Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.</summary></entry><entry><title type="html">Software Architecture Fundamentals - 2</title><link href="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-2.html" rel="alternate" type="text/html" title="Software Architecture Fundamentals - 2" /><published>2018-10-14T16:40:00+01:00</published><updated>2018-10-14T16:40:00+01:00</updated><id>http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-2</id><content type="html" xml:base="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-2.html">&lt;p&gt;Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continuous Delivery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;XP &amp;amp; TDD practices&lt;/p&gt;

&lt;p&gt;Integrate once everyday&lt;/p&gt;

&lt;p&gt;Early and often&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Continuous Integration&lt;/em&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tests on commit.&lt;/li&gt;
  &lt;li&gt;Production readiness on code change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Continuous Deployment/Delivery&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Software always deployable.&lt;/li&gt;
  &lt;li&gt;Production readiness on configuration change.&lt;/li&gt;
  &lt;li&gt;Reliable deployments&lt;/li&gt;
  &lt;li&gt;Release on business needs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Pre-requisites&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Configuration management&lt;/li&gt;
  &lt;li&gt;Automated testing&lt;/li&gt;
  &lt;li&gt;Configuration Integration - deployment pipelines&lt;/li&gt;
  &lt;li&gt;E2E in production like environments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deployments self-serviced&lt;/p&gt;

&lt;p&gt;Pull vs Push systems&lt;/p&gt;

&lt;p&gt;Pull - manual - Continuous delivery
Push - automated - Continuous deployment&lt;/p&gt;

&lt;p&gt;Why =&amp;gt; Responsiveness to business&lt;/p&gt;

&lt;p&gt;Goal =&amp;gt; Cycle time shorter&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Shorter time cycles leads to&lt;/em&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What-if scenarios&lt;/li&gt;
  &lt;li&gt;More releases which can be business differentiator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Engineering sophistication is required&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Production-like&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Increases confidence in production readiness&lt;/li&gt;
  &lt;li&gt;Environments become production-like.&lt;/li&gt;
  &lt;li&gt;Faster feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Repeatable reliable process for releasing software&lt;/p&gt;

&lt;p&gt;Provisioning boxes with devops&lt;/p&gt;

&lt;p&gt;Deployments and database migrations&lt;/p&gt;

&lt;p&gt;Try to automate everything.&lt;/p&gt;

&lt;p&gt;Separate things that can be automated with those that cannot be.&lt;/p&gt;

&lt;p&gt;Keep everything in version control&lt;/p&gt;

&lt;p&gt;Developer machines images can be used - Puppet/Chef. Check &lt;a href=&quot;https://github.com/boxen&quot;&gt;boxen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If it hurts, do it more often.&lt;/p&gt;

&lt;p&gt;Bring the pain forward&lt;/p&gt;

&lt;p&gt;Everyone responsible for delivery - dev, dba, qa, ops&lt;/p&gt;

&lt;p&gt;Check
&lt;a href=&quot;https://www.amazon.co.uk/Things-Every-Software-Architect-Should/dp/059652269X&quot;&gt;97 Things Every Architect Should Know&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.</summary></entry><entry><title type="html">Software Architecture Fundamentals - 1</title><link href="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-1.html" rel="alternate" type="text/html" title="Software Architecture Fundamentals - 1" /><published>2018-10-14T14:40:00+01:00</published><updated>2018-10-14T14:40:00+01:00</updated><id>http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-1</id><content type="html" xml:base="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-1.html">&lt;p&gt;Notes from the Software Architecture Fundamentals a video series on Safari books online.&lt;/p&gt;

&lt;p&gt;Choice of technology should not drive architecture&lt;/p&gt;

&lt;p&gt;Experience of having seen some badly implemented projects helps architects.&lt;/p&gt;

&lt;p&gt;Good to know &lt;a href=&quot;https://www.developerdotstar.com/mag/articles/PDF/DevDotStar_Reeves_CodeAsDesign.pdf&quot;&gt;what is software design ?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What’s the goal of architecture? A document?&lt;/p&gt;

&lt;p&gt;Deal with bits not atoms, more malleable.&lt;/p&gt;

&lt;p&gt;Design is complete source code. Building is easy. Maintaining is complex.&lt;/p&gt;

&lt;p&gt;Low tolerance for error.&lt;/p&gt;

&lt;p&gt;Hard to track.&lt;/p&gt;

&lt;p&gt;No economies of scale as components are all unique compared to say nuts/bolts.&lt;/p&gt;

&lt;p&gt;No predictability - but can test.&lt;/p&gt;

&lt;p&gt;Cheap to build, expensive to design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recurring memes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Architect for change.&lt;/p&gt;

&lt;p&gt;Software/Architecture becomes iterative.&lt;/p&gt;

&lt;p&gt;No architecture can solve all the problems.&lt;/p&gt;

&lt;p&gt;Understand why things work, not the mechanisms.&lt;/p&gt;

&lt;p&gt;Separate goals from approaches.&lt;/p&gt;

&lt;p&gt;Architecture isn’t a goal but a snapshot.&lt;/p&gt;

&lt;p&gt;Architecture is coupled to process (Continuous Delivery).&lt;/p&gt;

&lt;p&gt;Soft-skills are important.&lt;/p&gt;

&lt;p&gt;Continuous Delivery.&lt;/p&gt;

&lt;p&gt;Understanding large code bases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expectations from Architects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Keep up-to-date with latest trends&lt;/p&gt;

&lt;p&gt;Recommend solutions&lt;/p&gt;

&lt;p&gt;Compliance&lt;/p&gt;

&lt;p&gt;Exposure to multiple technologies&lt;/p&gt;

&lt;p&gt;Lead people&lt;/p&gt;

&lt;p&gt;Guide technical decisions&lt;/p&gt;

&lt;p&gt;Navigate politics&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aspects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Leadership&lt;/p&gt;

&lt;p&gt;Technical knowledge&lt;/p&gt;

&lt;p&gt;Business domain knowledge&lt;/p&gt;

&lt;p&gt;Methodologies and strategies&lt;/p&gt;</content><author><name></name></author><summary type="html">Notes from the Software Architecture Fundamentals a video series on Safari books online.</summary></entry></feed>