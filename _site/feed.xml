<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://0.0.0.0:3001/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:3001/" rel="alternate" type="text/html" /><updated>2025-06-14T11:32:58+01:00</updated><id>http://0.0.0.0:3001/feed.xml</id><title type="html">bits</title><subtitle>Pieces on bits</subtitle><entry><title type="html">Restarting My Blog with Claude Code: How AI Made Jekyll Setup Effortless</title><link href="http://0.0.0.0:3001/2025/06/14/restarting-blog-with-claude-code.html" rel="alternate" type="text/html" title="Restarting My Blog with Claude Code: How AI Made Jekyll Setup Effortless" /><published>2025-06-14T11:00:00+01:00</published><updated>2025-06-14T11:00:00+01:00</updated><id>http://0.0.0.0:3001/2025/06/14/restarting-blog-with-claude-code</id><content type="html" xml:base="http://0.0.0.0:3001/2025/06/14/restarting-blog-with-claude-code.html"><![CDATA[<p>After years of sporadic blogging, I’m back. But this time was different – instead of the usual painful process of remembering how Jekyll works, updating dependencies, and debugging setup issues, the entire experience was smooth and effortless. Why? Because I had Claude Code as my coding assistant.</p>

<h2 id="the-problem-blogging-restart-friction">The Problem: Blogging Restart Friction</h2>

<p>Every time I’ve tried to restart blogging in the past, it’s been the same story. My local Jekyll setup would be broken, dependencies outdated, and I’d spend hours just trying to get <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code> to work. By the time I got the technical hurdles sorted, my motivation to actually write had evaporated.</p>

<p>This time, I simply told Claude Code: “I have started this a long time ago on another machine. I don’t think I have local setup for this. Can you gather info from the web to find out if I need to update in anyway, and how to setup locally.”</p>

<h2 id="what-claude-code-did">What Claude Code Did</h2>

<p>In less than 10 minutes, Claude Code:</p>

<ol>
  <li><strong>Analyzed my codebase</strong> - Examined my Jekyll site structure, Gemfile, and configuration</li>
  <li><strong>Researched current requirements</strong> - Fetched up-to-date information from GitHub Pages documentation</li>
  <li><strong>Identified what was outdated</strong> - My Jekyll 3.8.4 was old, I was using direct Jekyll gem instead of github-pages gem, and Ruby requirements had changed</li>
  <li><strong>Fixed my Gemfile</strong> - Updated it to use the github-pages gem for compatibility</li>
  <li><strong>Handled the setup process</strong> - Updated Bundler, installed dependencies, resolved version conflicts</li>
  <li><strong>Debugged issues</strong> - When Jekyll failed due to Liquid syntax errors in my documentation, it quickly identified and fixed them</li>
  <li><strong>Got the server running</strong> - Had my blog accessible at localhost:3000</li>
</ol>

<h2 id="the-technical-details">The Technical Details</h2>

<p>Here’s what was wrong and how Claude Code fixed it:</p>

<h3 id="outdated-dependencies">Outdated Dependencies</h3>
<ul>
  <li><strong>Problem</strong>: Using Jekyll 3.8.4 (GitHub Pages now uses 3.10.0)</li>
  <li><strong>Solution</strong>: Switched to <code class="language-plaintext highlighter-rouge">github-pages</code> gem which automatically pulls in the right versions</li>
</ul>

<h3 id="gemfile-configuration">Gemfile Configuration</h3>
<p><strong>Before:</strong></p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s2">"jekyll"</span><span class="p">,</span> <span class="s2">"~&gt; 3.8.4"</span>
</code></pre></div></div>

<p><strong>After:</strong></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s2">"github-pages"</span><span class="p">,</span> <span class="ss">group: :jekyll_plugins</span>
</code></pre></div></div>

<h3 id="ruby-version-compatibility">Ruby Version Compatibility</h3>
<ul>
  <li><strong>Problem</strong>: GitHub Pages now requires Ruby 2.7.0+ (uses 3.3.4)</li>
  <li><strong>Solution</strong>: Verified my Ruby 3.1.4 was compatible and updated all dependencies</li>
</ul>

<h3 id="liquid-syntax-errors">Liquid Syntax Errors</h3>
<p>When Jekyll failed with cryptic errors about unclosed highlight tags, Claude Code quickly identified that my newly created CLAUDE.md file had unescaped Liquid syntax and fixed it using proper raw tags.</p>

<h2 id="what-this-means-for-my-blogging">What This Means for My Blogging</h2>

<p>Now that AI can handle the technical drudgery, I can focus on what I actually want to do: write and share ideas. This is particularly relevant as I dive deeper into AI tools and coding assistants.</p>

<h2 id="my-ai-learning-journey">My AI Learning Journey</h2>

<p>I want to document my exploration of AI tools, particularly:</p>
<ul>
  <li><strong>Coding assistants</strong> like Claude Code, GitHub Copilot, and Cursor</li>
  <li><strong>How AI changes development workflows</strong> and what skills become more/less important</li>
  <li><strong>Practical AI applications</strong> beyond just code generation</li>
  <li><strong>The evolving landscape</strong> of AI tools and how to choose between them</li>
</ul>

<p>The irony isn’t lost on me that my first post about exploring AI was itself made possible by AI.</p>

<h2 id="why-blog-again">Why Blog Again?</h2>

<p>Three main reasons:</p>

<ol>
  <li><strong>Track my learning publicly</strong> - The AI space moves fast, and writing helps me process and remember what I’m learning</li>
  <li><strong>Share practical insights</strong> - Beyond the hype, what actually works day-to-day?</li>
  <li><strong>Document the journey</strong> - I’m curious how my thinking about AI evolves over time</li>
</ol>

<p>Previously, blogging felt like a chore because of all the setup friction and editing overhead. Now with AI handling the technical hassles and helping with writing polish, it feels sustainable again.</p>

<h2 id="looking-forward">Looking Forward</h2>

<p>This is just the beginning. I plan to write regularly about my experiments with AI tools, both successes and failures. If you’re also exploring this space, I hope these posts are useful.</p>

<p>Next up: A deeper dive into Claude Code specifically and how it’s changing my development workflow.</p>

<hr />

<p><em>P.S. - Yes, Claude Code helped me write and polish this post too. Meta? Absolutely. Useful? Definitely.</em></p>]]></content><author><name></name></author><summary type="html"><![CDATA[How Claude Code turned what used to be a painful blog resurrection into a smooth 10-minute setup experience]]></summary></entry><entry><title type="html">A Science of Concurrent Programs - Begin</title><link href="http://0.0.0.0:3001/2024/01/06/a-science-of-concurrent-programs-begin.html" rel="alternate" type="text/html" title="A Science of Concurrent Programs - Begin" /><published>2024-01-06T06:00:00+00:00</published><updated>2024-01-06T06:00:00+00:00</updated><id>http://0.0.0.0:3001/2024/01/06/a-science-of-concurrent-programs-begin</id><content type="html" xml:base="http://0.0.0.0:3001/2024/01/06/a-science-of-concurrent-programs-begin.html"><![CDATA[<p>I have started reading the book <a href="https://lamport.azurewebsites.net/tla/science.pdf">A Science of Concurrent progam PDF</a>. Don’t remember where I got it from, but am interested after reading the first few pages.</p>

<p>I’ve come across Leslie Lamport, the author, first when I was reading about <a href="https://en.wikipedia.org/wiki/Consensus_(computer_science)">Consensus</a> and then it lead to <a href="https://lamport.azurewebsites.net/pubs/time-clocks.pdf">time &amp; clocks</a>. There are several more reasons to pay attention to Leslie Lamport’s work, one more I just learnt today that ‘LA’ in LaTeX is for Lamport in recognition of his contribution to LaTeX.</p>

<p>I want to read this book so that I am able to think mathematically of programs in general. As a professional programmer, there aren’t many opportunities to think about programs mathematically.</p>

<p>Also, this will be an excuse for me to get more familiar with LaTeX.</p>

<p>I’ve created <a href="https://github.com/vikrampawar/pdfs/tree/main/2024/science-of-concurrent-programs">github</a> repo folder to keep the PDF and the notes.</p>

<p>Refreshing basics and in the process getting acquainted with LaTeX.</p>

<p>Link to the below page as markdown <a href="https://github.com/vikrampawar/pdfs/blob/main/2024/science-of-concurrent-programs/OrdinaryMath.md">here</a>.</p>

<p><img src="2024-01-06-11-06-07.png" alt="" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[I have started reading the book A Science of Concurrent progam PDF. Don’t remember where I got it from, but am interested after reading the first few pages.]]></summary></entry><entry><title type="html">Using Git Large File Storage (LFS)</title><link href="http://0.0.0.0:3001/2024/01/03/using-git-lfs.html" rel="alternate" type="text/html" title="Using Git Large File Storage (LFS)" /><published>2024-01-03T18:00:00+00:00</published><updated>2024-01-03T18:00:00+00:00</updated><id>http://0.0.0.0:3001/2024/01/03/using-git-lfs</id><content type="html" xml:base="http://0.0.0.0:3001/2024/01/03/using-git-lfs.html"><![CDATA[<p><a href="https://git-lfs.com/">Git LFS</a> is an extension to git that allows us to track large files. It does this by storing the large files in a separate location and storing a pointer to the file in the git repository. This allows us to keep the git repository small and still be able to track large files.</p>

<p>To install it, we’ll use <a href="https://brew.sh/">brew</a> that’s available for both Mac and Linux.</p>

<p>Install git lfs</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>git-lfs
</code></pre></div></div>

<p>Check if a git repository has any git lfs files</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git lfs ls-files
</code></pre></div></div>

<p>To see how to add a large file, let’s initialize an empty git repository</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init <span class="nb">test
cd test</span>
</code></pre></div></div>

<p>Add a large file to the repository</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> ~/tmp/model.pkl <span class="nb">test</span>/

</code></pre></div></div>

<p>Track the file using git lfs</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git lfs track <span class="s2">"model.pkl"</span>
</code></pre></div></div>
<p>This creates a file called <code class="language-plaintext highlighter-rouge">.gitattributes</code> that contains the following line</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>model.pkl <span class="nv">filter</span><span class="o">=</span>lfs <span class="nv">diff</span><span class="o">=</span>lfs <span class="nv">merge</span><span class="o">=</span>lfs <span class="nt">-text</span>
</code></pre></div></div>

<p>Then, you can add the files to git as usual <code class="language-plaintext highlighter-rouge">git add .</code>.
At this stage, you can check if the file is being tracked by git lfs using <code class="language-plaintext highlighter-rouge">git lfs ls-files</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>❯ git lfs ls-files
e7d28f7f26 <span class="k">*</span> model.pkl
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Git LFS is an extension to git that allows us to track large files. It does this by storing the large files in a separate location and storing a pointer to the file in the git repository. This allows us to keep the git repository small and still be able to track large files.]]></summary></entry><entry><title type="html">Build and Deploy a Cat or Dog identifier</title><link href="http://0.0.0.0:3001/2024/01/02/build-and-deploy-cat-or-dog-identifier-copy.html" rel="alternate" type="text/html" title="Build and Deploy a Cat or Dog identifier" /><published>2024-01-02T18:15:00+00:00</published><updated>2024-01-02T18:15:00+00:00</updated><id>http://0.0.0.0:3001/2024/01/02/build-and-deploy-cat-or-dog-identifier%20copy</id><content type="html" xml:base="http://0.0.0.0:3001/2024/01/02/build-and-deploy-cat-or-dog-identifier-copy.html"><![CDATA[<p>I’ve recently started exploring AI and machine learning. I found this course by FastAI called <a href="https://course.fast.ai/">Practical Deep Learning</a>. I’m going through this course now.</p>

<p>One of the first things I learned is how to build a model and deploy it to a website. In this post, I’ll document the steps we can take to build and deploy an AI model that identifies whether an image is that of a cat or a dog.
The end result will be a web application that will allow users to upload an image and the application will identify whether the image is that of a cat or a dog.</p>

<p>Here is a link to the completed web application <a href="https://huggingface.co/spaces/bhetal/cats_or_dogs_identifier">Cat or Dog Identifier</a>.</p>

<p><img src="2024-01-03-20-15-58.png" alt="" /></p>

<p>In the python and AI community most of the work is done in Jupyter Notebooks.
In this post, I’ll be referring to the notebooks I’ve created for this project.</p>

<h2 id="train-the-model-and-export-it">Train the model and export it</h2>

<p>The first notebook is called <a href="https://github.com/vikrampawar/cat-or-dog-identifier/blob/main/fastai_cats_or_dogs_build_export.ipynb">Fastai Cats or Dogs build and export model</a>. It’s also available on Kaggle and is called <a href="https://www.kaggle.com/code/vikrampawar/fastai-cats-or-dogs">fastai cats or dogs</a>.</p>

<p>In this notebook, we’ll download the images of cats and dogs from the oxford pets dataset.</p>

<p>We’ll then divide the images into training and validation sets. These are input to the model we’ll be building. The training set is used to train the model and the validation set is used to validate the model.</p>

<p>Training just involves showing the model the images and telling it whether the image is that of a cat or a dog. The model will then learn to identify the features that distinguish a cat from a dog.</p>

<p>Validation is done by showing the model images from the validation set and asking it to identify whether the image is that of a cat or a dog. The model will then tell us whether it thinks the image is that of a cat or a dog. We’ll then compare the model’s prediction with the actual label of the image to determine how accurate the model is.</p>

<p>To cut short the time it takes to do the training, we’ll start with a model that has already been trained on a large number of images. This model is called a pre-trained model. We’ll then fine tune this model to identify cats and dogs.</p>

<p>Once the model is trained, we’ll save it to a file called <code class="language-plaintext highlighter-rouge">model.pkl</code>. These are usually called pickle files. We’ll then use this file to deploy the model to a web application.</p>

<p>When you execute this notebook, you’ll end up with a file called <code class="language-plaintext highlighter-rouge">model.pkl</code>. This is the file we’ll use in the next step.</p>

<h2 id="create-a-web-application-that-uses-the-model">Create a web application that uses the model</h2>

<p>For this, we’ll use another notebook called <a href="https://github.com/vikrampawar/cat-or-dog-identifier/blob/main/fastai_cats_or_dogs_run_gradio.ipynb">Fastai Cats or Dogs - Web App</a>.</p>

<p>In this notebook, we import the <code class="language-plaintext highlighter-rouge">model.pkl</code> file we created in the previous notebook. 
We then create a function that takes an image as input and returns the prediction of the model.
We’ll use this prediction to display the result on a web page.
For this, we’ll make use of a library called <a href="https://www.gradio.app/">Gradio</a>. Gradio allows us to create a web application with just the prediction function as input.</p>

<p>When you execute this notebook, you’ll end up with a web application that runs locally.</p>

<h2 id="create-a-space-on-hugging-face">Create a space on Hugging Face</h2>

<p>We’ll open an account on Hugging Face, if we don’t already have it and then go to <a href="https://huggingface.co/spaces">spaces</a> to create a new space. We’ll Select <code class="language-plaintext highlighter-rouge">Gradio</code> as the SDK and the free option for hardware. It will show the steps to follow.</p>

<p>Each space has its own git repository. It contains a file called <code class="language-plaintext highlighter-rouge">app.py</code>. This is the file that contains the code for the web application.
We’ll clone the repository to our local machine, create a the default <code class="language-plaintext highlighter-rouge">app.py</code> as suggested on the page and push it to the repository. This will trigger a build on Hugging Face. Once the build is complete, we’ll be able to access the web application from the URL provided by Hugging Face.</p>

<p>To be able to push changes to it, we should have access. We can either use Access Tokens or SSH keys. I prefer SSH keys. To generate an SSH key, we can follow the steps from Github <a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh">here</a>. Once we have the SSH key, we can add it to your Hugging Face SSH keys tab on the profile page.</p>

<p><img src="2024-01-03-09-14-59.png" alt="" /></p>

<h2 id="deploy-the-web-application-to-hugging-face">Deploy the web application to Hugging Face</h2>

<p>Now we have a way to deploy the web application, we’ll update the <code class="language-plaintext highlighter-rouge">app.py</code> to run our application. For this, we’ll have to extract and copy the relevant code from the notebook we created earlier.</p>

<p>Our <code class="language-plaintext highlighter-rouge">app.py</code> file has the below code</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">fastai.vision.all</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">gradio</span> <span class="k">as</span> <span class="n">gr</span>

<span class="c1"># determines if it's a cat from first letter
</span><span class="k">def</span> <span class="nf">is_cat</span><span class="p">(</span><span class="n">x</span><span class="p">):</span> <span class="k">return</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">isupper</span><span class="p">()</span> 

<span class="c1"># load the model 
</span><span class="n">learn</span> <span class="o">=</span> <span class="n">load_learner</span><span class="p">(</span><span class="s">'model.pkl'</span><span class="p">)</span>

<span class="n">categories</span> <span class="o">=</span> <span class="p">(</span><span class="s">'Dog'</span><span class="p">,</span> <span class="s">'Cat'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">img</span><span class="p">):</span>
    <span class="n">pred</span><span class="p">,</span><span class="n">pred_idx</span><span class="p">,</span><span class="n">probs</span> <span class="o">=</span> <span class="n">learn</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">categories</span><span class="p">,</span> <span class="nb">map</span><span class="p">(</span><span class="nb">float</span><span class="p">,</span> <span class="n">probs</span><span class="p">)))</span>

<span class="c1"># show it in a gradio interface
</span><span class="n">examples</span> <span class="o">=</span> <span class="p">[</span> <span class="s">'cat1.png'</span><span class="p">,</span> <span class="s">'dog1.png'</span><span class="p">,</span> <span class="s">'python1.png'</span><span class="p">]</span>
<span class="n">gr</span><span class="p">.</span><span class="n">Interface</span><span class="p">(</span><span class="n">fn</span><span class="o">=</span><span class="n">predict</span><span class="p">,</span> <span class="n">inputs</span><span class="o">=</span><span class="n">gr</span><span class="p">.</span><span class="n">Image</span><span class="p">(),</span> <span class="n">outputs</span><span class="o">=</span><span class="n">gr</span><span class="p">.</span><span class="n">Label</span><span class="p">(),</span> <span class="n">examples</span><span class="o">=</span><span class="n">examples</span><span class="p">).</span><span class="n">launch</span><span class="p">()</span>

</code></pre></div></div>

<p>We’ll also have to install the libraries we used in the notebook. We can do this by adding the following lines to the <code class="language-plaintext highlighter-rouge">requirements.txt</code> file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fastai
scikit-image
</code></pre></div></div>
<p>We’ll copy the <code class="language-plaintext highlighter-rouge">model.pkl</code> file to the repository.</p>

<p>The <code class="language-plaintext highlighter-rouge">model.pkl</code> files are usually large. So, we’ll have to use <a href="https://git-lfs.github.com/">git-lfs</a> to push it to the repository. You can find the steps to install and use git-lfs <a href="https://vikrampawar.github.io/2024/01/03/using-git-lfs.html">here</a>.</p>

<p>You should have the following files in the repository. Note that the <code class="language-plaintext highlighter-rouge">.png</code> files are the examples we’ll use to test the application. We’ll then push the changes to the repository.</p>

<p>This will trigger a build on Hugging Face. Once the build is complete, we’ll be able to access the web application from the URL provided by Hugging Face. You can also see all the files that make up the web application from the files tab.</p>

<p><img src="2024-01-03-20-26-54.png" alt="" /></p>

<p>Happy coding!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I’ve recently started exploring AI and machine learning. I found this course by FastAI called Practical Deep Learning. I’m going through this course now.]]></summary></entry><entry><title type="html">Spring Boot Course</title><link href="http://0.0.0.0:3001/2023/04/18/Spring-Boot-Day-01-Introduction.html" rel="alternate" type="text/html" title="Spring Boot Course" /><published>2023-04-18T11:00:00+01:00</published><updated>2023-04-18T11:00:00+01:00</updated><id>http://0.0.0.0:3001/2023/04/18/Spring-Boot-Day-01-Introduction</id><content type="html" xml:base="http://0.0.0.0:3001/2023/04/18/Spring-Boot-Day-01-Introduction.html"><![CDATA[<p>Starting a Spring Boot course today. 
If you are interested in joining the course, please contact me. 
You’ll find the links below.</p>

<p>The required materials are in the following two repositories:</p>

<ol>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks">Spring Boot in 3 Weeks</a> : This repository is forked from Andy Olsen’s repository. I’ve added a <code class="language-plaintext highlighter-rouge">slides/pdf</code> folder which contain pdf versions of the power point slides for easier viewing in VSCode.</li>
  <li><a href="https://github.com/rumq/java-springboot-course">Spring Boot Course</a> : This repository will contain any additional material we’ll require during the course. It also contains folders for the different members who are attending the course.</li>
</ol>

<p>We’ll be going through these slides and the corresponding demos for this course.</p>

<p><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/00-Welcome.pptx.pdf">Welcome</a></p>

<ol>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/01_Introduction_to_Spring_Boot.pptx.pdf">01_Introduction_to_Spring_Boot</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/02_Creating_Simple_App.pptx.pdf">02_Creating_Simple_App</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/03_Creating_Web_App.pptx.pdf">03_Creating_Web_App</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/04_Beans_DependencyInjection.pptx.pdf">04_Beans_Dependency</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/05_Injection_Techniques.pptx.pdf">05_Injection_Techniques</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/06_Configuration_Classes.pptx.pdf">06_Configuration_Classes</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/07_Spring_Boot_Techniques.pptx.pdf">07_Spring_Boot_Techniques</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/08_Integrating_Data_Sources.pptx.pdf">08_Integrating_Data_Sources</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/09_Querying_Modifying_Entities.pptx.pdf">09_Querying_Modifying_Entities</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/10_Spring_Data_Repositories.pptx.pdf">10_Spring_Data_Repositories</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/11_Simple_Rest_Services.pptx.pdf">11_Simple_Rest_Services</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/12_Full_Rest_Services.pptx.pdf">12_Full_Rest_Services</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/13_Consuming_Rest_Services.pptx.pdf">13_Consuming_Rest_Services</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/14_Messaging_Kafka.pptx.pdf">14_Messaging_Kafka</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/15_Containerization.pptx.pdf">15_Containerization</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/16_SpringCloudMicroservices.pptx.pdf">16_SpringCloudMicroservices</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/17_Authentication_OAUTH2.pptx.pdf">17_Authentication_OAUTH2</a></li>
  <li><a href="https://github.com/rumq/spring-boot-in-3-weeks/blob/master/slides/pdfs/18_Testing.pptx.pdf">18_Testing</a></li>
</ol>

<p>The meetings are recorded.
You can find the notes and the links to the recording on the README file in the course repository <a href="https://github.com/rumq/java-springboot-course">Spring Boot Course</a>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Starting a Spring Boot course today. If you are interested in joining the course, please contact me. You’ll find the links below.]]></summary></entry><entry><title type="html">Kakfa Learning Resources Notion Database</title><link href="http://0.0.0.0:3001/2023/04/14/Kafka-learning-resources.html" rel="alternate" type="text/html" title="Kakfa Learning Resources Notion Database" /><published>2023-04-14T18:00:00+01:00</published><updated>2023-04-14T18:00:00+01:00</updated><id>http://0.0.0.0:3001/2023/04/14/Kafka-learning-resources</id><content type="html" xml:base="http://0.0.0.0:3001/2023/04/14/Kafka-learning-resources.html"><![CDATA[<p>Today I’ve created a notion database to keep track of all the resources I’ve found useful for learning Kafka. I’ll keep adding to it as I find more resources.</p>

<p>Here is the publicly accessible link to the database - <a href="https://sincere-wildflower-595.notion.site/409619ed704344e38af90c26df8a1774?v=e111c8100a7e45ec9b933b762dc31d90">Kafka Learning Resources Notion Database</a>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Today I’ve created a notion database to keep track of all the resources I’ve found useful for learning Kafka. I’ll keep adding to it as I find more resources.]]></summary></entry><entry><title type="html">Java 21 release</title><link href="http://0.0.0.0:3001/2022/09/23/Java-21-release.html" rel="alternate" type="text/html" title="Java 21 release" /><published>2022-09-23T08:00:00+01:00</published><updated>2022-09-23T08:00:00+01:00</updated><id>http://0.0.0.0:3001/2022/09/23/Java-21-release</id><content type="html" xml:base="http://0.0.0.0:3001/2022/09/23/Java-21-release.html"><![CDATA[<p>Java 21 is released. The following have caught my attention</p>
<ul>
  <li>It’s an LTS, and from now on LTS will be released every 2 years</li>
  <li>Java virtual threads (Project Loom) is now part of the JDK</li>
  <li>Data oriented programming is now possible with improvements in Pattern matching, sealed classes, records, text blocks, and switch expressions.</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Java 21 is released. The following have caught my attention It’s an LTS, and from now on LTS will be released every 2 years Java virtual threads (Project Loom) is now part of the JDK Data oriented programming is now possible with improvements in Pattern matching, sealed classes, records, text blocks, and switch expressions.]]></summary></entry><entry><title type="html">Efficiency and Abundance</title><link href="http://0.0.0.0:3001/2020/06/16/Abundance-Efficiency-Redundancy.html" rel="alternate" type="text/html" title="Efficiency and Abundance" /><published>2020-06-16T21:00:00+01:00</published><updated>2020-06-16T21:00:00+01:00</updated><id>http://0.0.0.0:3001/2020/06/16/Abundance-Efficiency-Redundancy</id><content type="html" xml:base="http://0.0.0.0:3001/2020/06/16/Abundance-Efficiency-Redundancy.html"><![CDATA[<p>When you have scarcity, efficiency is a virtue. It allows you to make the most of your resources. However, if you have abundance, efficiency is no longer a virtue in the same respect.</p>

<p>Efficiency is hard. It is unpleasant to be efficient. It requires a lot more discipline. So, efficiency is rare. We are not efficient if there is no compelling need. That is, we abandon efficiency, as soon as we understand that efficiency is no longer making the difference.</p>

<p>Now, let us see where these ideas make sense. In the early days of computing, resources were limited. So, efficiency was important. People tried to save resources every way they could. So, a lot of applications that were developed were developed with razor sharp focus on not wasting any resource, i.e, everything was made as efficient as was possible. So computing or developing software was not pleasant, not many people could do it, or wanted to do it.</p>

<p>But as computing resources became cheaper, and abundant, there was no longer the need to be very efficient in many types of development. It was okay if your program consumes 10 times, 100 times more memory, or disk space, or it does totally unnecessary work, many times over. It became possible, easy, and pleasant to write software this way that met the real needs of business.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[When you have scarcity, efficiency is a virtue. It allows you to make the most of your resources. However, if you have abundance, efficiency is no longer a virtue in the same respect.]]></summary></entry><entry><title type="html">What is a Message?</title><link href="http://0.0.0.0:3001/2020/06/16/What-Is-A-Message.html" rel="alternate" type="text/html" title="What is a Message?" /><published>2020-06-16T19:00:00+01:00</published><updated>2020-06-16T19:00:00+01:00</updated><id>http://0.0.0.0:3001/2020/06/16/What-Is-A-Message</id><content type="html" xml:base="http://0.0.0.0:3001/2020/06/16/What-Is-A-Message.html"><![CDATA[<p>What is a <code class="language-plaintext highlighter-rouge">Message</code>?</p>

<p>Here is a good definition of a <a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/Message.html">Message</a>.</p>

<p>I want to develop your intuition about a <code class="language-plaintext highlighter-rouge">Message</code>, so I’ll elaborate this concept.</p>

<p><code class="language-plaintext highlighter-rouge">Message</code> is an overused word. I want to develop intuition about a <code class="language-plaintext highlighter-rouge">Message</code> as used in Software Development.</p>

<p>Now let us suppose two people Alice and Bob want to communicate. If Alice shouts at Bob, we can’t say Alice has given a <code class="language-plaintext highlighter-rouge">Message</code> to Bob. If instead, Alice tells Charlie something about Bob, and Charlie goes and tells it to Bob, we can say Charlie has passed on a <code class="language-plaintext highlighter-rouge">Message</code> to Bob.</p>

<p>What is the difference between the two situations? Of course, I introduced Charlie. But, Alice could have written the same thing in a piece of paper and sent that to Bob, or Alice could have sent an email or a text that has the same content, and in all these cases, we would say that Alice has sent Bob, a <code class="language-plaintext highlighter-rouge">Message</code>.</p>

<p>So, the fundamental thing that makes a <code class="language-plaintext highlighter-rouge">Message</code> a <code class="language-plaintext highlighter-rouge">Message</code> is that it leaves one person and then goes to another person. It has an independent existence outside of both people. And, because it leaves one person and then goes to another person, a <code class="language-plaintext highlighter-rouge">Message</code> by necessity needs to have the following information for it to be considered a <code class="language-plaintext highlighter-rouge">Message</code>.</p>

<p>It needs to have the information about where is it coming from, where is it going to, what is it about, and finally the actual content. These are called <code class="language-plaintext highlighter-rouge">Sender</code>, <code class="language-plaintext highlighter-rouge">Recipient</code>, <code class="language-plaintext highlighter-rouge">Type</code> (Subject) and <code class="language-plaintext highlighter-rouge">Payload</code>, respectively. The <code class="language-plaintext highlighter-rouge">Sender</code>, <code class="language-plaintext highlighter-rouge">Recipient</code> and <code class="language-plaintext highlighter-rouge">Type</code> are grouped together as a <code class="language-plaintext highlighter-rouge">Header</code>.</p>

<p>The same concept is used when information leaves one Application and goes to another Application.</p>

<p>An email, or a text, that we send is a <code class="language-plaintext highlighter-rouge">Message</code>. It has a <code class="language-plaintext highlighter-rouge">Header</code>, i.e, <code class="language-plaintext highlighter-rouge">Sender</code>, <code class="language-plaintext highlighter-rouge">Recipient</code> and <code class="language-plaintext highlighter-rouge">Type</code> along with the <code class="language-plaintext highlighter-rouge">Payload</code>.</p>

<p>A <code class="language-plaintext highlighter-rouge">Message</code> can be a lot more things, it can have a lot more information, but the <code class="language-plaintext highlighter-rouge">Header</code> and the <code class="language-plaintext highlighter-rouge">Payload</code> are the absolute minimum information that it needs to have for it to be able to leave one person or an Application, be independent, and reach the right <code class="language-plaintext highlighter-rouge">Recipient</code>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[What is a Message?]]></summary></entry><entry><title type="html">What is a CIDR</title><link href="http://0.0.0.0:3001/2020/06/15/What-Is-A-CIDR_Asublime-vscode-eclipse-select-tab.html" rel="alternate" type="text/html" title="What is a CIDR" /><published>2020-06-15T08:00:00+01:00</published><updated>2020-06-15T08:00:00+01:00</updated><id>http://0.0.0.0:3001/2020/06/15/What-Is-A-CIDR_Asublime-vscode-eclipse-select-tab</id><content type="html" xml:base="http://0.0.0.0:3001/2020/06/15/What-Is-A-CIDR_Asublime-vscode-eclipse-select-tab.html"><![CDATA[<p>The Wikipedia link is here <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless Inter-domain Routing</a></p>

<p>And here is the basic information you need to know.</p>

<p>A CIDR identifies a machine connected to a network.</p>

<p>An example CIDR for IPV4 address looks like this <code class="language-plaintext highlighter-rouge">192.168.100.14/24</code>.</p>

<p>The numbers <code class="language-plaintext highlighter-rouge">192</code>, <code class="language-plaintext highlighter-rouge">168</code>, <code class="language-plaintext highlighter-rouge">100</code>, <code class="language-plaintext highlighter-rouge">14</code> are four octets. An octet represents <code class="language-plaintext highlighter-rouge">8</code> bits. We use four octets, so we are using <code class="language-plaintext highlighter-rouge">32</code> bits to represent the machine.</p>

<p>A bit can have two possibilities either <code class="language-plaintext highlighter-rouge">0</code> or <code class="language-plaintext highlighter-rouge">1</code>. So, an octet can have 256 (2 ** 8) values, starting from 0 and ending with 255, which means 4 octets can represent 4,294,967,296 possibilities (2 ** 32).</p>

<p>But, the number after the <code class="language-plaintext highlighter-rouge">/</code> puts a limit on this.</p>

<p>Before, I explain how the limit is applied, I’ll have to explain what number <code class="language-plaintext highlighter-rouge">24</code> means. The number <code class="language-plaintext highlighter-rouge">24</code> could also have been represented as 4 octets. If we did, it would look like <code class="language-plaintext highlighter-rouge">255.255.255.0</code>. The number <code class="language-plaintext highlighter-rouge">24</code> is a compact way of representing these 4 octets. Are you wondering how these are equivalent? The value <code class="language-plaintext highlighter-rouge">255</code> when represented by a an octet (8 bits) looks like this <code class="language-plaintext highlighter-rouge">11111111</code>. So <code class="language-plaintext highlighter-rouge">255.255.255.0</code> would be <code class="language-plaintext highlighter-rouge">11111111.11111111.11111111.00000000</code>. I put <code class="language-plaintext highlighter-rouge">.</code> in between for readability. As you can see, this big number has <code class="language-plaintext highlighter-rouge">24</code> leading bits set to <code class="language-plaintext highlighter-rouge">1</code>. That’s the link between the two representations.</p>

<p>This number is telling us that while using the address <code class="language-plaintext highlighter-rouge">192.168.100.14</code>, don’t use the first 24 bits or the first 3 octets. That is, <code class="language-plaintext highlighter-rouge">192.168.100</code> are off limits. That leaves us with only the last octet, so only 256 possible values :( ! Imagine if this number was <code class="language-plaintext highlighter-rouge">31</code>, that leaves only <code class="language-plaintext highlighter-rouge">1</code> bit or two possibilities.</p>

<p>The 3 octets that we do not use, along with a <code class="language-plaintext highlighter-rouge">0</code> for the fourth octet <code class="language-plaintext highlighter-rouge">192.168.100.0</code> represents something called a <code class="language-plaintext highlighter-rouge">routing prefix</code>. If you represent this routing prefix in the form <code class="language-plaintext highlighter-rouge">255.255.255.0</code>, it’s called the <code class="language-plaintext highlighter-rouge">subnet mask</code> and logically represents the same thing.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[The Wikipedia link is here Classless Inter-domain Routing]]></summary></entry></feed>