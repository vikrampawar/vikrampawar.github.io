<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-10-14T17:56:26+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">bits</title><subtitle>Pieces on bits</subtitle><entry><title type="html">Software Architecture Fundamentals - 4 - Architecting for change</title><link href="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-4.html" rel="alternate" type="text/html" title="Software Architecture Fundamentals - 4 - Architecting for change" /><published>2018-10-14T17:46:00+01:00</published><updated>2018-10-14T17:46:00+01:00</updated><id>http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-4</id><content type="html" xml:base="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-4.html">&lt;p&gt;Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.&lt;/p&gt;

&lt;p&gt;Business in constant change&lt;/p&gt;

&lt;p&gt;Technologies in constant change&lt;/p&gt;

&lt;p&gt;Architectural agility&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technique 1 : Reduce dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use a Messaging/Bus/Adapters/Architectural Pattern to reduce dependencies&lt;/p&gt;

&lt;p&gt;Components can evolve independently&lt;/p&gt;

&lt;p&gt;Downsides : Solution becomes more complex, performance goes down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technique 2 : Standards&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Industry Standards&lt;/p&gt;

&lt;p&gt;Corporate Standards&lt;/p&gt;

&lt;p&gt;De-facto Standards&lt;/p&gt;

&lt;p&gt;Large resource pool, although be wary of average resources, requires good hiring practices.&lt;/p&gt;

&lt;p&gt;Better integration&lt;/p&gt;

&lt;p&gt;Feasibility (in budget)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technique 3 : Product agnostic approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Avoid vendor lock-in using anti-corruption layers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technique 4 : Domain specific architecture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Generic architecture is difficult to change&lt;/p&gt;

&lt;p&gt;Limits scope -&amp;gt; drivers, requirements, business direction, industry trends&lt;/p&gt;

&lt;p&gt;Trading -&amp;gt; high performance architecture&lt;/p&gt;

&lt;p&gt;Insurance –&amp;gt; Shared?&lt;/p&gt;

&lt;p&gt;Business goals, requirements, drivers and industry trends should drive architecture.&lt;/p&gt;</content><author><name></name></author><summary type="html">Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.</summary></entry><entry><title type="html">Software Architecture Fundamentals - 4 - Architecting for change</title><link href="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-5.html" rel="alternate" type="text/html" title="Software Architecture Fundamentals - 4 - Architecting for change" /><published>2018-10-14T17:46:00+01:00</published><updated>2018-10-14T17:46:00+01:00</updated><id>http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-5</id><content type="html" xml:base="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-5.html">&lt;p&gt;Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.&lt;/p&gt;

&lt;p&gt;Business in constant change&lt;/p&gt;

&lt;p&gt;Technologies in constant change&lt;/p&gt;

&lt;p&gt;Architectural agility&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technique 1 : Reduce dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use a Messaging/Bus/Adapters/Architectural Pattern to reduce dependencies&lt;/p&gt;

&lt;p&gt;Components can evolve independently&lt;/p&gt;

&lt;p&gt;Downsides : Solution becomes more complex, performance goes down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technique 2 : Standards&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Industry Standards&lt;/p&gt;

&lt;p&gt;Corporate Standards&lt;/p&gt;

&lt;p&gt;De-facto Standards&lt;/p&gt;

&lt;p&gt;Large resource pool, although be wary of average resources, requires good hiring practices.&lt;/p&gt;

&lt;p&gt;Better integration&lt;/p&gt;

&lt;p&gt;Feasibility (in budget)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technique 3 : Product agnostic approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Avoid vendor lock-in using anti-corruption layers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technique 4 : Domain specific architecture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Generic architecture is difficult to change&lt;/p&gt;

&lt;p&gt;Limits scope -&amp;gt; drivers, requirements, business direction, industry trends&lt;/p&gt;

&lt;p&gt;Trading -&amp;gt; high performance architecture&lt;/p&gt;

&lt;p&gt;Insurance –&amp;gt; Shared?&lt;/p&gt;

&lt;p&gt;Business goals, requirements, drivers and industry trends should drive architecture.&lt;/p&gt;</content><author><name></name></author><summary type="html">Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.</summary></entry><entry><title type="html">Software Architecture Fundamentals - 2</title><link href="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-2.html" rel="alternate" type="text/html" title="Software Architecture Fundamentals - 2" /><published>2018-10-14T16:40:00+01:00</published><updated>2018-10-14T16:40:00+01:00</updated><id>http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-2</id><content type="html" xml:base="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-2.html">&lt;p&gt;Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continuous Delivery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;XP &amp;amp; TDD practices&lt;/p&gt;

&lt;p&gt;Integrate once everyday&lt;/p&gt;

&lt;p&gt;Early and often&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Continuous Integration&lt;/em&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tests on commit.&lt;/li&gt;
  &lt;li&gt;Production readiness on code change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Continuous Deployment/Delivery&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Software always deployable.&lt;/li&gt;
  &lt;li&gt;Production readiness on configuration change.&lt;/li&gt;
  &lt;li&gt;Reliable deployments&lt;/li&gt;
  &lt;li&gt;Release on business needs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Pre-requisites&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Configuration management&lt;/li&gt;
  &lt;li&gt;Automated testing&lt;/li&gt;
  &lt;li&gt;Configuration Integration - deployment pipelines&lt;/li&gt;
  &lt;li&gt;E2E in production like environments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deployments self-serviced&lt;/p&gt;

&lt;p&gt;Pull vs Push systems&lt;/p&gt;

&lt;p&gt;Pull - manual - Continuous delivery
Push - automated - Continuous deployment&lt;/p&gt;

&lt;p&gt;Why =&amp;gt; Responsiveness to business&lt;/p&gt;

&lt;p&gt;Goal =&amp;gt; Cycle time shorter&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Shorter time cycles leads to&lt;/em&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What-if scenarios&lt;/li&gt;
  &lt;li&gt;More releases which can be business differentiator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Engineering sophistication is required&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Production-like&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Increases confidence in production readiness&lt;/li&gt;
  &lt;li&gt;Environments become production-like.&lt;/li&gt;
  &lt;li&gt;Faster feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Repeatable reliable process for releasing software&lt;/p&gt;

&lt;p&gt;Provisioning boxes with devops&lt;/p&gt;

&lt;p&gt;Deployments and database migrations&lt;/p&gt;

&lt;p&gt;Try to automate everything.&lt;/p&gt;

&lt;p&gt;Separate things that can be automated with those that cannot be.&lt;/p&gt;

&lt;p&gt;Keep everything in version control&lt;/p&gt;

&lt;p&gt;Developer machines images can be used - Puppet/Chef. Check &lt;a href=&quot;https://github.com/boxen&quot;&gt;boxen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If it hurts, do it more often.&lt;/p&gt;

&lt;p&gt;Bring the pain forward&lt;/p&gt;

&lt;p&gt;Everyone responsible for delivery - dev, dba, qa, ops&lt;/p&gt;

&lt;p&gt;Check
&lt;a href=&quot;https://www.amazon.co.uk/Things-Every-Software-Architect-Should/dp/059652269X&quot;&gt;97 Things Every Architect Should Know&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.</summary></entry><entry><title type="html">Software Architecture Fundamentals - 3</title><link href="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-3.html" rel="alternate" type="text/html" title="Software Architecture Fundamentals - 3" /><published>2018-10-14T16:40:00+01:00</published><updated>2018-10-14T16:40:00+01:00</updated><id>http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-3</id><content type="html" xml:base="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-3.html">&lt;p&gt;Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Architecture Soft Skills&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Requires leadership. The 3Cs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Communication&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Effectively communicate ideas, concepts, issues and solutions with stake holders - developers, qa, devops, business&lt;/p&gt;

&lt;p&gt;Explain on white board rather than writing documents&lt;/p&gt;

&lt;p&gt;Explain complex technical topics to non technical people&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Colloboration&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Solicit ideas&lt;/p&gt;

&lt;p&gt;Get feedback early and often&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Clarity&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Articulate architectural solution in clear concise terms as applicable to the stake holder&lt;/p&gt;

&lt;p&gt;Translation skills business requirements to architecture are important&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Techincal knowledge&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Knowledge pyramid&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Top - The stuff you know. Need to maintain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Middle - The stuff you know, you don’t know.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bottom - The stuff you don’t know, you don’t know.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More of top leads to more depth&lt;/p&gt;

&lt;p&gt;More of middle leads to more breadth.&lt;/p&gt;

&lt;p&gt;Architect should aim to increase breadth, reduce bottom.&lt;/p&gt;

&lt;p&gt;Multi-platform knowledge, otherwise Architect would have a narrow focus. Hammer analogy.&lt;/p&gt;

&lt;p&gt;To increase breadth, read books, infoq, attend conferences, see videos.&lt;/p&gt;

&lt;p&gt;Aim to increase business domain knowledge.&lt;/p&gt;

&lt;p&gt;Know the trends and issues.&lt;/p&gt;

&lt;p&gt;Gain trust by speaking the business language.&lt;/p&gt;

&lt;p&gt;Use appropriate methodology and strategy&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Understanding large codebases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Metrics&lt;/p&gt;

&lt;p&gt;Cyclometric complexity&lt;/p&gt;

&lt;p&gt;C&amp;amp;K&lt;/p&gt;

&lt;p&gt;Source monitor&lt;/p&gt;

&lt;p&gt;Heat maps (Cruise control)&lt;/p&gt;

&lt;p&gt;panopticode&lt;/p&gt;

&lt;p&gt;Code coverage&lt;/p&gt;

&lt;p&gt;Size and complexity pyramid (inCode)&lt;/p&gt;

&lt;p&gt;Toxicity chart&lt;/p&gt;

&lt;p&gt;X-Ray : Eclipse plugin, a probe&lt;/p&gt;

&lt;p&gt;Proximity alert&lt;/p&gt;

&lt;p&gt;Codecity&lt;/p&gt;

&lt;p&gt;Signal to noise&lt;/p&gt;

&lt;p&gt;No ‘1 true metric’&lt;/p&gt;

&lt;p&gt;metrics gathered and ignored&lt;/p&gt;

&lt;p&gt;inaction/over action&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hawthorne effect&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Initial assessment - More light leads to more productivity. Later finding proved that light had on affect, but the act of measuring productivity had increased productivity.&lt;/p&gt;

&lt;p&gt;Essential vs accidental complexity&lt;/p&gt;

&lt;p&gt;Probes vs Radiators&lt;/p&gt;</content><author><name></name></author><summary type="html">Notes from the Software Architecture Fundamentals a video series on Safari books online - continued.</summary></entry><entry><title type="html">Software Architecture Fundamentals - 1</title><link href="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-1.html" rel="alternate" type="text/html" title="Software Architecture Fundamentals - 1" /><published>2018-10-14T14:40:00+01:00</published><updated>2018-10-14T14:40:00+01:00</updated><id>http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-1</id><content type="html" xml:base="http://localhost:4000/architecture/2018/10/14/software-architecture-fundamentals-1.html">&lt;p&gt;Notes from the Software Architecture Fundamentals a video series on Safari books online.&lt;/p&gt;

&lt;p&gt;Choice of technology should not drive architecture&lt;/p&gt;

&lt;p&gt;Experience of having seen some badly implemented projects helps architects.&lt;/p&gt;

&lt;p&gt;Good to know &lt;a href=&quot;https://www.developerdotstar.com/mag/articles/PDF/DevDotStar_Reeves_CodeAsDesign.pdf&quot;&gt;what is software design ?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What’s the goal of architecture? A document?&lt;/p&gt;

&lt;p&gt;Deal with bits not atoms, more malleable.&lt;/p&gt;

&lt;p&gt;Design is complete source code. Building is easy. Maintaining is complex.&lt;/p&gt;

&lt;p&gt;Low tolerance for error.&lt;/p&gt;

&lt;p&gt;Hard to track.&lt;/p&gt;

&lt;p&gt;No economies of scale as components are all unique compared to say nuts/bolts.&lt;/p&gt;

&lt;p&gt;No predictability - but can test.&lt;/p&gt;

&lt;p&gt;Cheap to build, expensive to design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recurring memes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Architect for change.&lt;/p&gt;

&lt;p&gt;Software/Architecture becomes iterative.&lt;/p&gt;

&lt;p&gt;No architecture can solve all the problems.&lt;/p&gt;

&lt;p&gt;Understand why things work, not the mechanisms.&lt;/p&gt;

&lt;p&gt;Separate goals from approaches.&lt;/p&gt;

&lt;p&gt;Architecture isn’t a goal but a snapshot.&lt;/p&gt;

&lt;p&gt;Architecture is coupled to process (Continuous Delivery).&lt;/p&gt;

&lt;p&gt;Soft-skills are important.&lt;/p&gt;

&lt;p&gt;Continuous Delivery.&lt;/p&gt;

&lt;p&gt;Understanding large code bases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expectations from Architects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Keep up-to-date with latest trends&lt;/p&gt;

&lt;p&gt;Recommend solutions&lt;/p&gt;

&lt;p&gt;Compliance&lt;/p&gt;

&lt;p&gt;Exposure to multiple technologies&lt;/p&gt;

&lt;p&gt;Lead people&lt;/p&gt;

&lt;p&gt;Guide technical decisions&lt;/p&gt;

&lt;p&gt;Navigate politics&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aspects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Leadership&lt;/p&gt;

&lt;p&gt;Technical knowledge&lt;/p&gt;

&lt;p&gt;Business domain knowledge&lt;/p&gt;

&lt;p&gt;Methodologies and strategies&lt;/p&gt;</content><author><name></name></author><summary type="html">Notes from the Software Architecture Fundamentals a video series on Safari books online.</summary></entry><entry><title type="html">Blogging using Github</title><link href="http://localhost:4000/github/blogging/2018/10/14/Blogging-using-Github.html" rel="alternate" type="text/html" title="Blogging using Github " /><published>2018-10-14T12:18:50+01:00</published><updated>2018-10-14T12:18:50+01:00</updated><id>http://localhost:4000/github/blogging/2018/10/14/Blogging-using-Github</id><content type="html" xml:base="http://localhost:4000/github/blogging/2018/10/14/Blogging-using-Github.html">&lt;p&gt;This blog uses Github to serve the blog posts.&lt;/p&gt;

&lt;p&gt;For this, first I had to update gnupg, rvm and ruby and then install jekyll.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew upgrade gnupg                                    &lt;span class=&quot;c&quot;&gt;# update gnu pg&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-sSL&lt;/span&gt; https://rvm.io/mpapis.asc  | gpg &lt;span class=&quot;nt&quot;&gt;--import&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# get key&lt;/span&gt;
rvm get stable &lt;span class=&quot;nt&quot;&gt;--auto-dotfiles&lt;/span&gt;                        &lt;span class=&quot;c&quot;&gt;# update rvm&lt;/span&gt;
rvm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby 2.5.1                                &lt;span class=&quot;c&quot;&gt;# install ruby&lt;/span&gt;
gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll bundler                            &lt;span class=&quot;c&quot;&gt;# install jekyll&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then create the blog and serve locally&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll new myblog                                     &lt;span class=&quot;c&quot;&gt;# create blog&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog                                             &lt;span class=&quot;c&quot;&gt;# go to blog directory&lt;/span&gt;
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve                              &lt;span class=&quot;c&quot;&gt;# serve locally&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Information on &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Information on &lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;Jekyll docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Information on &lt;a href=&quot;https://rvm.io/&quot;&gt;rvm&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">This blog uses Github to serve the blog posts.</summary></entry></feed>